# Generated by Django 5.1.11 on 2025-08-29 23:53

import core.models
import django.core.validators
import django.db.models.deletion
import timezone_field.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('name', models.CharField(help_text='Name of the operator organization', max_length=255, verbose_name='name')),
                ('url', models.URLField(blank=True, help_text='Homepage URL of the operator', null=True, verbose_name='homepage')),
                ('scope', models.JSONField(blank=True, default=dict, help_text='Geographic or population scope criteria for the operator', verbose_name='scope')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this operator is currently active', verbose_name='active')),
            ],
            options={
                'verbose_name': 'operator',
                'verbose_name_plural': 'operators',
                'db_table': 'deploycenter_operator',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('sub', models.CharField(blank=True, help_text='Required. 255 characters or fewer. Letters, numbers, and @/./+/-/_/: characters only.', max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Enter a valid sub. This value may contain only letters, numbers, and @/./+/-/_/: characters.', regex='^[\\w.@+-:]+\\Z')], verbose_name='sub')),
                ('full_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='full name')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='identity email address')),
                ('admin_email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='admin email address')),
                ('language', models.CharField(choices=[('fr-fr', 'French')], default='fr-fr', help_text='The language in which the user wants to see the interface.', max_length=10, verbose_name='language')),
                ('timezone', timezone_field.fields.TimeZoneField(choices_display='WITH_GMT_OFFSET', default='UTC', help_text='The timezone in which the user wants to see times.', use_pytz=False)),
                ('is_staff', models.BooleanField(default=False, help_text='Whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'db_table': 'deploycenter_user',
            },
            managers=[
                ('objects', core.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='OperatorOrganizationRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('role', models.CharField(choices=[('admin', 'Admin')], default='admin', help_text='Role of the operator in the organization', max_length=50, verbose_name='role')),
                ('operator', models.ForeignKey(help_text='Operator with a role in the organization', on_delete=django.db.models.deletion.CASCADE, related_name='organization_roles', to='core.operator', verbose_name='operator')),
            ],
            options={
                'verbose_name': 'operator organization role',
                'verbose_name_plural': 'operator organization roles',
                'db_table': 'deploycenter_operator_organization_role',
                'ordering': ['operator__name', 'organization__name'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('name', models.CharField(help_text='Official name of the collectivité', max_length=255, verbose_name='name')),
                ('type', models.CharField(default='commune', help_text='Type of collectivité (commune, epci, departement, region)', max_length=50, verbose_name='type')),
                ('siret', models.CharField(blank=True, help_text='SIRET code of the main establishment', max_length=14, null=True, unique=True, verbose_name='SIRET')),
                ('siren', models.CharField(blank=True, help_text='SIREN code of the organization', max_length=9, null=True, verbose_name='SIREN')),
                ('code_postal', models.CharField(blank=True, help_text='Postal code of the collectivité', max_length=10, null=True, verbose_name='postal code')),
                ('code_insee', models.CharField(blank=True, help_text='INSEE administrative code', max_length=10, null=True, unique=True, verbose_name='INSEE code')),
                ('population', models.IntegerField(blank=True, help_text='Population count from latest INSEE data', null=True, verbose_name='population')),
                ('epci_libelle', models.CharField(blank=True, help_text='Name of the EPCI the commune belongs to', max_length=255, null=True, verbose_name='EPCI name')),
                ('epci_siren', models.CharField(blank=True, help_text='SIREN code of the EPCI', max_length=9, null=True, verbose_name='EPCI SIREN')),
                ('epci_population', models.IntegerField(blank=True, help_text='Population of the EPCI', null=True, verbose_name='EPCI population')),
                ('departement_code_insee', models.CharField(blank=True, help_text='INSEE department code', max_length=3, null=True, verbose_name='department code INSEE')),
                ('region_code_insee', models.CharField(blank=True, help_text='INSEE region code', max_length=2, null=True, verbose_name='region code INSEE')),
                ('adresse_messagerie', models.EmailField(blank=True, help_text='Official email address from Service-Public.fr', max_length=254, null=True, verbose_name='email address')),
                ('site_internet', models.URLField(blank=True, help_text='Official website URL from Service-Public.fr', null=True, verbose_name='website')),
                ('telephone', models.CharField(blank=True, help_text='Official phone number from Service-Public.fr', max_length=20, null=True, verbose_name='phone')),
                ('rpnt', models.JSONField(blank=True, default=list, help_text='List of valid RPNT criteria and meta-criteria', null=True, verbose_name='RPNT criteria')),
                ('service_public_url', models.URLField(blank=True, help_text='URL of the associated page on Service-Public.fr', null=True, verbose_name='Service-Public URL')),
                ('operators', models.ManyToManyField(help_text='Operators managing this organization', related_name='organizations', through='core.OperatorOrganizationRole', to='core.operator', verbose_name='operators')),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
                'db_table': 'deploycenter_organization',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='operatororganizationrole',
            name='organization',
            field=models.ForeignKey(help_text='Organization where the operator has a role', on_delete=django.db.models.deletion.CASCADE, related_name='operator_roles', to='core.organization', verbose_name='organization'),
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('type', models.CharField(help_text='Type of service (activates custom implementation code)', max_length=100, verbose_name='type')),
                ('url', models.URLField(blank=True, help_text='URL where the service can be accessed', null=True, verbose_name='URL')),
                ('description', models.TextField(blank=True, help_text='Description of what this service provides', null=True, verbose_name='description')),
                ('config', models.JSONField(blank=True, default=dict, help_text='Base configuration data for metrics scraping and service operation', null=True, verbose_name='configuration')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this service is currently available for subscription', verbose_name='active')),
            ],
            options={
                'verbose_name': 'service',
                'verbose_name_plural': 'services',
                'db_table': 'deploycenter_service',
                'ordering': ['type', 'url'],
                'indexes': [models.Index(fields=['is_active'], name='deploycente_is_acti_a1a4b2_idx')],
            },
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('name', models.CharField(help_text='Name of the metric', max_length=255, verbose_name='name')),
                ('value', models.DecimalField(decimal_places=6, help_text='Numeric value of the metric', max_digits=20, verbose_name='value')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When this metric was recorded', verbose_name='timestamp')),
                ('organization', models.ForeignKey(blank=True, help_text='Organization this metric is associated with (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='core.organization', verbose_name='organization')),
                ('service', models.ForeignKey(help_text='Service this metric is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='core.service', verbose_name='service')),
            ],
            options={
                'verbose_name': 'metric',
                'verbose_name_plural': 'metrics',
                'db_table': 'deploycenter_metric',
                'ordering': ['-timestamp', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ServiceSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata for this subscription', verbose_name='metadata')),
                ('organization', models.ForeignKey(help_text='Organization subscribing to the service', on_delete=django.db.models.deletion.CASCADE, related_name='service_subscriptions', to='core.organization', verbose_name='organization')),
                ('service', models.ForeignKey(help_text='Service being subscribed to', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='core.service', verbose_name='service')),
            ],
            options={
                'verbose_name': 'service subscription',
                'verbose_name_plural': 'service subscriptions',
                'db_table': 'deploycenter_service_subscription',
                'ordering': ['organization__name', 'service__type'],
            },
        ),
        migrations.CreateModel(
            name='UserOperatorRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='primary key for the record as UUID', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date and time at which a record was created', verbose_name='created on')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='date and time at which a record was last updated', verbose_name='updated on')),
                ('role', models.CharField(choices=[('admin', 'Administrator')], default='admin', help_text='Role assigned to the user for this operator', max_length=50, verbose_name='role')),
                ('operator', models.ForeignKey(help_text='Operator this user has access to', on_delete=django.db.models.deletion.CASCADE, related_name='user_roles', to='core.operator', verbose_name='operator')),
                ('user', models.ForeignKey(help_text='User assigned to this operator', on_delete=django.db.models.deletion.CASCADE, related_name='operator_roles', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'user operator role',
                'verbose_name_plural': 'user operator roles',
                'db_table': 'deploycenter_user_operator_role',
                'ordering': ['user__full_name', 'operator__name'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='operators',
            field=models.ManyToManyField(help_text='Operators this user has access to', related_name='users', through='core.UserOperatorRole', to='core.operator', verbose_name='operators'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['type'], name='deploycente_type_83ba66_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['code_insee'], name='deploycente_code_in_11cfc8_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['siren'], name='deploycente_siren_192935_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['siret'], name='deploycente_siret_e1e24b_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['departement_code_insee'], name='deploycente_departe_90338b_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['region_code_insee'], name='deploycente_region__bbab07_idx'),
        ),
        migrations.AddIndex(
            model_name='operatororganizationrole',
            index=models.Index(fields=['role'], name='deploycente_role_5f3ee1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='operatororganizationrole',
            unique_together={('operator', 'organization')},
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['timestamp'], name='deploycente_timesta_9aa8aa_idx'),
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['name'], name='deploycente_name_d94491_idx'),
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['service'], name='deploycente_service_d2f474_idx'),
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['organization'], name='deploycente_organiz_d29ed8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='servicesubscription',
            unique_together={('organization', 'service')},
        ),
        migrations.AlterUniqueTogether(
            name='useroperatorrole',
            unique_together={('user', 'operator')},
        ),
    ]
